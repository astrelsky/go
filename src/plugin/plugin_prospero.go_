// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build prospero

package plugin

import (
	"errors"
	"sync"
	"syscall"
	"unsafe"
)

type PluginLoader interface {
	OpenPlugin(name string) (*ProsperoPlugin, error)
}

type MappedAddress struct {
	Addr, Length uintptr
}

type ProsperoPlugin struct {
	Plugin
	Mappings []MappedAddress
	Symbols  map[string]uintptr
	Jit      int
}

var (
	pluginLoader                     PluginLoader
	ErrNoPluginLoader                = errors.New("plugin: no PluginLoader registered")
	ErrPluginLoaderAlreadyRegistered = errors.New("plugin: PluginLoader already registered")
)

func (p *ProsperoPlugin) Close() (err error) {
	for i := range p.Mappings {
		_, _, errno := syscall.Syscall(syscall.SYS_MUNMAP, p.Mappings[i].addr, p.Mappings[i].length, 0)
		if errno != 0 {
			err = errors.Join(err, errno)
		}
	}
	p.Mappings = nil
	if p.Jit != -1 {
		err = errors.Join(err, syscall.Close(p.Jit))
		p.Jit = -1
	}
	return
}

// FIXME: this is only for developing this and will be removed later
func RegisterPluginLoader(loader PluginLoader) error {
	if pluginLoader != nil {
		return ErrPluginLoaderAlreadyRegistered
	}
	pluginLoader = loader
	return nil
}

func open(name string) (p *Plugin, err error) {
	if pluginLoader == nil {
		return nil, ErrNoPluginLoader
	}

	pluginsMu.Lock()

	pp, err := pluginLoader.OpenPlugin(name)
	if err != nil {
		pluginsMu.Unlock()
		return
	}
	if plugins == nil {
		plugins = make(map[string]*Plugin)
	}
	pluginpath, syms, initTasks, errstr := lastmoduleinit()
	pp.Plugin = Plugin{
		pluginpath: pluginpath,
		err:        errstr,
		loaded:     make(chan struct{}),
	}

	plugins[name] = p

	pluginsMu.Unlock()
	doInit(initTasks)

	// Fill out the value of each plugin symbol.
	updatedSyms := map[string]any{}
	for symName, sym := range syms {
		isFunc := symName[0] == '.'
		if isFunc {
			delete(syms, symName)
			symName = symName[1:]
		}

		p, ok := elfsyms[pluginpath+"."+symName]

		if !ok {
			return nil, errors.New(`plugin.Open("` + name + `"): could not find symbol ` + symName)
		}
		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&sym))
		if isFunc {
			(*valp)[1] = unsafe.Pointer(&p)
		} else {
			(*valp)[1] = unsafe.Pointer(p)
		}
		// we can't add to syms during iteration as we'll end up processing
		// some symbols twice with the inability to tell if the symbol is a function
		updatedSyms[symName] = sym
	}
	p.syms = updatedSyms

	close(p.loaded)

	return
}

func lookup(p *Plugin, symName string) (Symbol, error) {
	if s := p.syms[symName]; s != nil {
		return s, nil
	}
	return nil, errors.New("plugin: symbol " + symName + " not found in plugin " + p.pluginpath)
}

var (
	pluginsMu sync.Mutex
	plugins   map[string]*Plugin
)

// lastmoduleinit is defined in package runtime.
func lastmoduleinit() (pluginpath string, syms map[string]any, inittasks []*initTask, errstr string)

// doInit is defined in package runtime.
//
//go:linkname doInit runtime.doInit
func doInit(t []*initTask)

type initTask struct {
	// fields defined in runtime.initTask. We only handle pointers to an initTask
	// in this package, so the contents are irrelevant.
}
